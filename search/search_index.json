{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The user interface has evolved dramatically over the years, bringing us incredible benefits in terms of time efficiency. For instance, in the past, we had to manually dial a number to call someone with an old phone. But now, with buttons, touch screens and even voice commands, we can make calls in a matter of seconds.</p> <p>In many machine learning projects, we face the challenge of comparing different models, datasets and frameworks. This can be very tedious\ud83d\ude12 and time-consuming\u23f3. Because each dataset has its own format, each framework has its own configuration and each model has its own input and output even they are dealing with the exact same task \ud83d\ude20.</p> <p>When it comes to MLOps (machine learning operations), you need to be able to keep up with all the new ideas and SOTA models in deep learning as quickly as possible\ud83d\ude80.</p> <p>Here comes Waffle\ud83e\uddc7. Waffle is a framework that lets you use lots of different deep learning tools through just one interface. It's user-friendly and easy\ud83d\ude0a. We believe it's going to make a big revolution in the AI industry.</p> <p></p> <p>Experience the power\ud83d\udcaa of revolution that Waffle\ud83e\uddc7 brings to you, unlocking limitless possibilities for your machine learning projects.</p>"},{"location":"#discussion","title":"Discussion","text":"<p>If you want to discuss about waffle or request new features, please use our discussion page</p> <p></p>"},{"location":"waffle_hub/","title":"Waffle Hub","text":"<p><code>Waffle Hub</code> provide two key component classes: <code>Hub</code> and <code>Dataset</code>.</p>"},{"location":"waffle_hub/#hub","title":"Hub","text":"<p><code>Hub</code> provides same interface for various powerfull Deep Learning Frameworks. Here is our brief system architecture.</p> <p></p> <p>Each input and output adapter is responsible for converting our interface to the framework's interface. For example, <code>Ultralytics</code> uses <code>imgsz</code> for image size parameter, but <code>detectron2</code> uses <code>IMAGE_SIZE</code>. So, we need to convert our interface to the framework's interface. <code>waffle_hub</code> provides <code>InputAdapter</code> and <code>OutputAdapter</code> for this purpose.</p>"},{"location":"waffle_hub/#dataset","title":"Dataset","text":"<p><code>Dataset</code> class support many types of data format such as <code>coco</code>, <code>yolo</code>. You can use it to convert dataset or manage dataset.</p>"},{"location":"waffle_hub/hub/hub/","title":"Hub","text":""},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.artifacts_dir","title":"<code>artifacts_dir: Path</code>  <code>property</code>","text":"<p>Artifact Directory. This is raw output of each backend.</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.backend","title":"<code>backend: str</code>  <code>property</code> <code>writable</code>","text":"<p>Backend name</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.best_ckpt_file","title":"<code>best_ckpt_file: Path</code>  <code>property</code>","text":"<p>Best Checkpoint File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.config_dir","title":"<code>config_dir: Path</code>  <code>property</code>","text":"<p>Config Directory (model config, train config)</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.draw_dir","title":"<code>draw_dir: Path</code>  <code>property</code>","text":"<p>Draw Results Directory</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.evaluate_file","title":"<code>evaluate_file: Path</code>  <code>property</code>","text":"<p>Evaluate Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.evaluate_state_file","title":"<code>evaluate_state_file: Path</code>  <code>property</code>","text":"<p>Evaluate State Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.export_onnx_state_file","title":"<code>export_onnx_state_file: Path</code>  <code>property</code>","text":"<p>Export ONNX State Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.export_waffle_state_file","title":"<code>export_waffle_state_file: Path</code>  <code>property</code>","text":"<p>Export Waffle State Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.hub_dir","title":"<code>hub_dir: Path</code>  <code>property</code>","text":"<p>Hub(Model) Directory</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.inference_dir","title":"<code>inference_dir: Path</code>  <code>property</code>","text":"<p>Inference Results Directory</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.inference_file","title":"<code>inference_file: Path</code>  <code>property</code>","text":"<p>Inference Results File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.inference_state_file","title":"<code>inference_state_file: Path</code>  <code>property</code>","text":"<p>Inference State Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.last_ckpt_file","title":"<code>last_ckpt_file: Path</code>  <code>property</code>","text":"<p>Last Checkpoint File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.metrics_file","title":"<code>metrics_file: Path</code>  <code>property</code>","text":"<p>Metrics File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.model_config_file","title":"<code>model_config_file: Path</code>  <code>property</code>","text":"<p>Model Config yaml File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Hub name</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.onnx_file","title":"<code>onnx_file: Path</code>  <code>property</code>","text":"<p>Best Checkpoint ONNX File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.root_dir","title":"<code>root_dir: Path</code>  <code>property</code> <code>writable</code>","text":"<p>Root Directory</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.state_dir","title":"<code>state_dir: Path</code>  <code>property</code>","text":"<p>State Directory</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.train_config_file","title":"<code>train_config_file: Path</code>  <code>property</code>","text":"<p>Train Config yaml File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.train_state_file","title":"<code>train_state_file: Path</code>  <code>property</code>","text":"<p>Train State Json File</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.waffle_file","title":"<code>waffle_file: Path</code>  <code>property</code>","text":"<p>Export Waffle file</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.benchmark","title":"<code>benchmark(image_size=None, batch_size=16, device='0', half=False, trial=100)</code>","text":"<p>Benchmark Model</p> <p>Parameters:</p> Name Type Description Default <code>image_size</code> <code>Union[int, list[int]]</code> <p>inference image size. None for same with train_config (recommended).</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>dynamic batch size. Defaults to 16.</p> <code>16</code> <code>device</code> <code>str</code> <p>device. \"cpu\" or \"gpu_id\". Defaults to \"0\".</p> <code>'0'</code> <code>half</code> <code>bool</code> <p>half. Defaults to False.</p> <code>False</code> <code>trial</code> <code>int</code> <p>number of trials. Defaults to 100.</p> <code>100</code> Example <p>hub.benchmark(         image_size=640,         batch_size=16,         device=\"0\",         half=False,         trial=100,     ) {     \"inference_time\": 0.123,     \"fps\": 123.123,     \"image_size\": [640, 640],     \"batch_size\": 16,     \"device\": \"0\",     \"cpu_name\": \"Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz\",     \"gpu_name\": \"GeForce GTX 1080 Ti\", }</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>benchmark result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.check_train_sanity","title":"<code>check_train_sanity()</code>","text":"<p>Check if all essential files are exist.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if all files are exist else False</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.delete_artifacts","title":"<code>delete_artifacts()</code>","text":"<p>Delete Artifacts Directory. It can be trained again.</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.delete_hub","title":"<code>delete_hub()</code>","text":"<p>Delete Hub. Hub name can be used again.</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.evaluate","title":"<code>evaluate(dataset, dataset_root_dir=None, set_name='test', batch_size=4, image_size=None, letter_box=None, confidence_threshold=0.25, iou_threshold=0.5, half=False, workers=2, device='0', callbacks=None)</code>","text":"<p>Start Evaluate</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[Dataset, str]</code> <p>Waffle Dataset object or path or name.</p> required <code>dataset_root_dir</code> <code>str</code> <p>Waffle Dataset root directory. Defaults to None.</p> <code>None</code> <code>set_name</code> <code>str</code> <p>Waffle Dataset evalutation set name. Defaults to \"test\".</p> <code>'test'</code> <code>batch_size</code> <code>int</code> <p>batch size. Defaults to 4.</p> <code>4</code> <code>image_size</code> <code>Union[int, list[int]]</code> <p>image size. If None, use train config or defaults to 224.</p> <code>None</code> <code>letter_box</code> <code>bool</code> <p>letter box. If None, use train config or defaults to True.</p> <code>None</code> <code>confidence_threshold</code> <code>float</code> <p>confidence threshold. Not required in classification. Defaults to 0.25.</p> <code>0.25</code> <code>iou_threshold</code> <code>float</code> <p>iou threshold. Not required in classification. Defaults to 0.5.</p> <code>0.5</code> <code>half</code> <code>bool</code> <p>half. Defaults to False.</p> <code>False</code> <code>workers</code> <code>int</code> <p>workers. Defaults to 2.</p> <code>2</code> <code>device</code> <code>str</code> <p>device. Defaults to \"0\".</p> <code>'0'</code> <code>callbacks</code> <code>list[BaseEvaluateCallback]</code> <p>evaluate callbacks. Defaults to None.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; evaluate_result = hub.evaluate(\n        dataset=detection_dataset,\n        batch_size=4,\n        image_size=640,\n        letterbox=False,\n        confidence_threshold=0.25,\n        iou_threshold=0.5,\n        workers=4,\n        device=\"0\",\n    )\n# or you can use train option by passing None\n&gt;&gt;&gt; evaluate_result = hub.evaluate(\n        ...\n        image_size=None,  # use train option or default to 224\n        letterbox=None,  # use train option or default to True\n        ...\n    )\n&gt;&gt;&gt; evaluate_result.metrics\n[{\"tag\": \"mAP\", \"value\": 0.1}, ...]\n</code></pre> <p>Returns:</p> Name Type Description <code>EvaluateResult</code> <code>EvaluateResult</code> <p>evaluate result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.export_onnx","title":"<code>export_onnx(image_size=None, batch_size=16, opset_version=11, half=False, device='0', callbacks=None)</code>","text":"<p>Export Onnx Model</p> <p>Parameters:</p> Name Type Description Default <code>image_size</code> <code>Union[int, list[int]]</code> <p>image size. If None, same train config (recommended).</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>dynamic batch size. Defaults to 16.</p> <code>16</code> <code>opset_version</code> <code>int</code> <p>onnx opset version. Defaults to 11.</p> <code>11</code> <code>half</code> <code>bool</code> <p>half. Defaults to False.</p> <code>False</code> <code>device</code> <code>str</code> <p>device. \"cpu\" or \"gpu_id\". Defaults to \"0\".</p> <code>'0'</code> <code>callbacks</code> <code>list[BaseExportOnnxCallback]</code> <p>export onnx callbacks. Defaults to None.</p> <code>None</code> Example <p>export_onnx_result = hub.export_onnx(     image_size=640,     batch_size=16,     opset_version=11, )</p> <p>Returns:</p> Name Type Description <code>ExportOnnxResult</code> <code>ExportOnnxResult</code> <p>export onnx result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.export_onnx--or-simply-use-train-option-by-passing-none","title":"or simply use train option by passing None","text":"<p>export_onnx_result = hub.export_onnx(     ...,     image_size=None,  # use train option     ... ) export_onnx_result.onnx_file hubs/my_hub/weights/model.onnx</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.export_waffle","title":"<code>export_waffle()</code>","text":"<p>Export Waffle Model Example:     &gt;&gt;&gt; export_waffle_result = hub.export_waffle()     &gt;&gt;&gt; export_waffle_result.waffle_file     hubs/my_hub/my_hub.waffle Returns:     ExportWaffleResult: export waffle result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.from_model_config","title":"<code>from_model_config(name, model_config_file, root_dir=None, train_callbacks=None)</code>  <code>classmethod</code>","text":"<p>Create new Hub with model config.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>hub name.</p> required <code>model_config_file</code> <code>str</code> <p>model config yaml file.</p> required <code>root_dir</code> <code>str</code> <p>hub root directory. Defaults to None.</p> <code>None</code> <code>train_callbacks</code> <code>list[BaseTrainCallback]</code> <p>Train callbacks. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Hub</code> <code>Hub</code> <p>New Hub instance</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.from_waffle_file","title":"<code>from_waffle_file(name, waffle_file, root_dir=None, train_callbacks=None)</code>  <code>classmethod</code>","text":"<p>Import new Hub with waffle file for inference.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>hub name.</p> required <code>waffle_file</code> <code>str</code> <p>waffle file path.</p> required <code>root_dir</code> <code>str</code> <p>hub root directory. Defaults to None.</p> <code>None</code> <code>train_callbacks</code> <code>list[BaseTrainCallback]</code> <p>Train callbacks. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Hub</code> <code>Hub</code> <p>New Hub instance</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_available_backends","title":"<code>get_available_backends()</code>  <code>classmethod</code>","text":"<p>Get available backends</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Available backends</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_available_model_sizes","title":"<code>get_available_model_sizes(backend, task, model_type)</code>  <code>classmethod</code>","text":"<p>Get available model sizes</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>Backend name</p> required <code>task</code> <code>str</code> <p>Task name</p> required <code>model_type</code> <code>str</code> <p>Model type</p> required <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>If backend is not supported</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Available model sizes</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_available_model_types","title":"<code>get_available_model_types(backend, task)</code>  <code>classmethod</code>","text":"<p>Get available model types</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>Backend name</p> required <code>task</code> <code>str</code> <p>Task name</p> required <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>If backend is not supported</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Available model types</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_available_tasks","title":"<code>get_available_tasks(backend)</code>  <code>classmethod</code>","text":"<p>Get available tasks</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>Backend name</p> required <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>If backend is not supported</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Available tasks</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_default_train_params","title":"<code>get_default_train_params(backend, task, model_type, model_size)</code>  <code>classmethod</code>","text":"<p>Get default train params</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>Backend name</p> required <code>task</code> <code>str</code> <p>Task name</p> required <code>model_type</code> <code>str</code> <p>Model type</p> required <code>model_size</code> <code>str</code> <p>Model size</p> required <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>If backend is not supported</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Default train params</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_evaluate_result","title":"<code>get_evaluate_result()</code>","text":"<p>Get evaluate result from evaluate file.</p> Example <p>hub.get_evaluate_result() [     {         \"tag\": \"mAP\",         \"value\": 0.5,     }, ]</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: evaluate result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_evaluate_state","title":"<code>get_evaluate_state()</code>","text":"<p>Get evaluate state from evaluate state file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>evaluate state</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_export_onnx_state","title":"<code>get_export_onnx_state()</code>","text":"<p>Get export onnx state from export onnx state file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>export onnx state</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_export_waffle_state","title":"<code>get_export_waffle_state()</code>","text":"<p>Get export waffle state from export waffle state file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>export waffle state</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_hub_list","title":"<code>get_hub_list(root_dir=None)</code>  <code>classmethod</code>","text":"<p>Get hub name list in root_dir.</p> <p>Parameters:</p> Name Type Description Default <code>root_dir</code> <code>str</code> <p>hub root directory. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: hub name list</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_inference_result","title":"<code>get_inference_result()</code>","text":"<p>Get inference result from inference file.</p> Example <p>hub.get_inference_result() [     {         \"id\": \"00000001\",         \"category\": \"person\",         \"bbox\": [0.1, 0.2, 0.3, 0.4],         \"score\": 0.9,     }, ]</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: inference result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_inference_state","title":"<code>get_inference_state()</code>","text":"<p>Get inference state from inference state file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>inference state</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_manager_class","title":"<code>get_manager_class(backend=None)</code>  <code>classmethod</code>","text":"<p>Get training manager class</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>Backend name</p> <code>None</code> <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>If backend is not supported</p> <p>Returns:</p> Name Type Description <code>BaseManager</code> <code>BaseManager</code> <p>Backend training manager Class</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_metrics","title":"<code>get_metrics()</code>","text":"<p>Get metrics per epoch from metric file.</p> Example <p>hub.get_metrics() [     [         {             \"tag\": \"epoch\",             \"value\": \"1\",         },         {             \"tag\": \"train_loss\",             \"value\": \"0.0012\",         }     ], ]</p> <p>Returns:</p> Type Description <code>list[list[dict]]</code> <p>list[dict]: metrics per epoch</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_model_config","title":"<code>get_model_config()</code>","text":"<p>Get model config from model config file.</p> <p>Returns:</p> Name Type Description <code>ModelConfig</code> <code>ModelConfig</code> <p>model config</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_train_config","title":"<code>get_train_config()</code>","text":"<p>Get train config from train config file.</p> <p>Returns:</p> Name Type Description <code>TrainConfig</code> <code>TrainConfig</code> <p>train config</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.get_train_state","title":"<code>get_train_state()</code>","text":"<p>Get train state from train state file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>train state</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.inference","title":"<code>inference(source, recursive=True, image_size=None, letter_box=None, batch_size=4, confidence_threshold=0.25, iou_threshold=0.5, half=False, workers=2, device='0', draw=False, show=False, callbacks=None)</code>","text":"<p>Start Inference</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>image directory or image path or video path.</p> required <code>recursive</code> <code>bool</code> <p>recursive. Defaults to True.</p> <code>True</code> <code>image_size</code> <code>Union[int, list[int]]</code> <p>image size. If None, use train config.</p> <code>None</code> <code>letter_box</code> <code>bool</code> <p>letter box. If None, use train config.</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>batch size. Defaults to 4.</p> <code>4</code> <code>confidence_threshold</code> <code>float</code> <p>confidence threshold. Not required in classification. Defaults to 0.25.</p> <code>0.25</code> <code>iou_threshold</code> <code>float</code> <p>iou threshold. Not required in classification. Defaults to 0.5.</p> <code>0.5</code> <code>half</code> <code>bool</code> <p>half. Defaults to False.</p> <code>False</code> <code>workers</code> <code>int</code> <p>workers. Defaults to 2.</p> <code>2</code> <code>device</code> <code>str</code> <p>device. \"cpu\" or \"gpu_id\". Defaults to \"0\".</p> <code>'0'</code> <code>draw</code> <code>bool</code> <p>register draw callback. Defaults to False.</p> <code>False</code> <code>show</code> <code>bool</code> <p>register show callback. Defaults to False.</p> <code>False</code> <code>callbacks</code> <code>list[BaseInferenceCallback]</code> <p>inference callbacks. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if can not detect appropriate dataset.</p> <code>e</code> <p>something gone wrong with ultralytics</p> Example <p>inference_result = hub.inference(         source=\"path/to/images\",         batch_size=4,         image_size=640,         letterbox=False,         confidence_threshold=0.25,         iou_threshold=0.5,         workers=4,         device=\"0\",         draw=True,     )</p> <p>Returns:</p> Name Type Description <code>InferenceResult</code> <code>InferenceResult</code> <p>inference result</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.inference--or-simply-use-train-option-by-passing-none","title":"or simply use train option by passing None","text":"<p>inference_result = hub.inference(         ...         image_size=None,  # use train option or default to 224         letterbox=None,  # use train option or default to True         ...     ) inference_result.predictions [{\"relative/path/to/image/file\": [{\"category\": \"1\", \"bbox\": [0, 0, 100, 100], \"score\": 0.9}, ...]}, ...]</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.load","title":"<code>load(name, root_dir=None, train_callbacks=None)</code>  <code>classmethod</code>","text":"<p>Load Hub by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>hub name.</p> required <code>root_dir</code> <code>str</code> <p>hub root directory. Defaults to None.</p> <code>None</code> <code>train_callbacks</code> <code>list[BaseTrainCallback]</code> <p>Train callbacks. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if hub is not exist in root_dir</p> <p>Returns:</p> Name Type Description <code>Hub</code> <code>Hub</code> <p>Hub instance</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.new","title":"<code>new(name, backend=None, task=None, model_type=None, model_size=None, categories=None, root_dir=None, train_callbacks=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Create Hub.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Hub name</p> required <code>backend</code> <code>str</code> <p>Backend name. See Hub.get_available_backends. Defaults to None.</p> <code>None</code> <code>task</code> <code>str</code> <p>Task Name. See Hub.get_available_tasks. Defaults to None.</p> <code>None</code> <code>model_type</code> <code>str</code> <p>Model Type. See Hub.get_available_model_types. Defaults to None.</p> <code>None</code> <code>model_size</code> <code>str</code> <p>Model Size. See Hub.get_available_model_sizes. Defaults to None.</p> <code>None</code> <code>categories</code> <code>Union[list[dict], list]</code> <p>class dictionary or list. [{\"supercategory\": \"name\"}, ] or [\"name\",]. Defaults to None.</p> <code>None</code> <code>root_dir</code> <code>str</code> <p>Root directory of hub repository. Defaults to None.</p> <code>None</code> <code>train_callbacks</code> <code>list[BaseTrainCallback]</code> <p>Train callbacks. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Hub</code> <code>Hub</code> <p>Hub instance</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.save_model_config","title":"<code>save_model_config()</code>","text":"<p>Save ModelConfig.</p>"},{"location":"waffle_hub/hub/hub/#waffle_hub.hub.Hub.train","title":"<code>train(dataset, dataset_root_dir=None, epochs=None, batch_size=None, image_size=None, learning_rate=None, letter_box=None, pretrained_model=None, device='0', workers=2, seed=0, advance_params=None, verbose=True)</code>","text":"<p>Start Train</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[Dataset, str]</code> <p>Waffle Dataset object or path or name.</p> required <code>dataset_root_dir</code> <code>str</code> <p>Waffle Dataset root directory. Defaults to None.</p> <code>None</code> <code>epochs</code> <code>int</code> <p>number of epochs. None to use default. Defaults to None.</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>batch size. None to use default. Defaults to None.</p> <code>None</code> <code>image_size</code> <code>Union[int, list[int]]</code> <p>image size. None to use default. Defaults to None.</p> <code>None</code> <code>learning_rate</code> <code>float</code> <p>learning rate. None to use default. Defaults to None.</p> <code>None</code> <code>letter_box</code> <code>bool</code> <p>letter box. None to use default. Defaults to None.</p> <code>None</code> <code>pretrained_model</code> <code>str</code> <p>pretrained model. None to use default. Defaults to None.</p> <code>None</code> <code>device</code> <code>str</code> <p>\"cpu\" or \"gpu_id\" or comma seperated \"gpu_ids\". Defaults to \"0\".</p> <code>'0'</code> <code>workers</code> <code>int</code> <p>number of workers. Defaults to 2.</p> <code>2</code> <code>seed</code> <code>int</code> <p>random seed. Defaults to 0.</p> <code>0</code> <code>advance_params</code> <code>Union[dict, str]</code> <p>advance params dictionary or file (yaml, json) path. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>verbose. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if trained artifact exists.</p> <code>FileNotFoundError</code> <p>if can not detect appropriate dataset.</p> <code>ValueError</code> <p>if can not detect appropriate dataset.</p> <code>e</code> <p>something gone wrong with ultralytics</p> Example <p>train_result = hub.train(         dataset=dataset,         epochs=100,         batch_size=16,         image_size=640,         learning_rate=0.001,         letterbox=False,         device=\"0\",  # use gpu 0         # device=\"0,1,2,3\",  # use gpu 0,1,2,3         # device=\"cpu\",  # use cpu         workers=2,         seed=123     ) train_result.best_ckpt_file hubs/my_hub/weights/best_ckpt.pt train_result.metrics [[{\"tag\": \"epoch\", \"value\": 1}, {\"tag\": \"train/loss\", \"value\": 0.1}, ...], ...]</p> <p>Returns:</p> Name Type Description <code>TrainResult</code> <code>TrainResult</code> <p>train result</p>"}]}